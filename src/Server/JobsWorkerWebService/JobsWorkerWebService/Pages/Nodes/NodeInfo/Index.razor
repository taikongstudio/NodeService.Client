@namespace JobsWorkerWebService.Client.Pages.Nodes.NodeInfo
@using JobsWorkerWebService.Pages.Nodes.NodeInfo.Components.FileExplorer
@using JobsWorkerWebService.Pages.Nodes.NodeInfo.Components.BasicInformation
@using JobsWorkerWebService.Pages.Nodes.NodeInfo.Components.EnvironmentVariables
@using JobsWorkerWebService.Pages.Nodes.NodeInfo.Components.NetworkInterfaces
@using JobsWorkerWebService.Pages.Nodes.NodeInfo.Components.ProcessList
@inject System.Net.Http.HttpClient HttpClient
@page "/nodes/{nodeName}"
@inject NotificationService _notice
@inject NavigationManager NavigationManager

<PageTitle>@NodeName</PageTitle>

<GridContent>
        <GridCol Span="24">
            <PageHeader 
                Class="site-page-header" 
                Title="@NodeName" 
                OnBack="@(()=> { NavigationManager.NavigateTo("/nodes");})" />
            <Tabs DefaultActiveKey="1">
                <TabPane Key="1">
                    <TabTemplate>
                        <span><Icon Type="file" />基本信息</span>
                    </TabTemplate>
                    <ChildContent>
                        <BasicInformation NodeProperties="@NodeProperties" />
                    </ChildContent>
                </TabPane>
                <TabPane Key="2">
                    <TabTemplate>
                        <span><Icon Type="file" />环境变量</span>
                    </TabTemplate>
                    <ChildContent>
                        <EnvironmentVariables NodeProperties="@NodeProperties" />
                    </ChildContent>
                </TabPane>
                <TabPane Key="3">
                    <TabTemplate>
                        <span><Icon Type="file" />网络接口</span>
                    </TabTemplate>
                    <ChildContent>
                        <NetworkInterfaces NodeProperties="@NodeProperties" />
                    </ChildContent>
                    </TabPane>
                <TabPane  Key="4">
                    <TabTemplate>
                        <span><Icon Type="file" />进程列表</span>
                    </TabTemplate>
                    <ChildContent>
                        <ProcessList NodeProperties="@NodeProperties" />
                    </ChildContent>
        
                </TabPane>
                <TabPane Key="5">
                    <TabTemplate>
                        <span><Icon Type="file" />文件浏览器</span>
                    </TabTemplate>
                    <ChildContent>
                        <FileExplorer NodeName="@NodeName"/>
                    </ChildContent>
                </TabPane>
                <TabPane Key="6">
                    <TabTemplate>
                        <span><Icon Type="code" />配置</span>
                    </TabTemplate>
                    <ChildContent>Tab 1</ChildContent>
                </TabPane>
                <TabPane Key="7">
                    <TabTemplate>
                        <span><Icon Type="code" />终端</span>
                    </TabTemplate>
                    <ChildContent>Tab 1</ChildContent>
                </TabPane>
            </Tabs>
        </GridCol>
</GridContent>

    @code{
    [Parameter]
    public string? NodeName { get; set; }

    NodePropertyItem[] propertyItems;

    NodeProperties? NodeProperties;


    protected async override Task OnParametersSetAsync()
    {
        try
        {
            await RefreshNodePropsAsync();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {

        }

        await base.OnParametersSetAsync();
    }

    private async Task RefreshNodePropsAsync()
    {
        try
        {
            var apiResult = await this.HttpClient.GetFromJsonAsync<ApiResult<NodePropertyItem[]>>($"/api/nodes/{this.NodeName}/props?rdm={Random.Shared.Next()}");
            if (apiResult.ErrorCode == 0)
            {
                this.propertyItems = apiResult.Value;
                this.NodeProperties = NodeProperties.FromNodePropertyItems(this.propertyItems);
            }
            else
            {
                this.NodeProperties = NodeProperties.FromNodePropertyItems(null);
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "加载失败",
                        Description = $"错误代码:{apiResult.ErrorCode},消息:{apiResult.Message}",
                    });
            }
        }
        catch (Exception ex)
        {

        }
    }

    private void OnProcessClick(string icon)
    {

    }


}
