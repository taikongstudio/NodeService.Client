@namespace JobsWorkerWebService.Client.Pages.Plugins.List
@page "/plugins"
@using JobsWorker.Shared.Models
@using JobsWorkerWebService.Client
@inject System.Net.Http.HttpClient HttpClient
@using System.ComponentModel
@using AntDesign.TableModels
@using System.ComponentModel.DataAnnotations
@using System.Text.Json
@inject NotificationService _notice

<GridContent>
    <Modal Title="@("BasicModal")"
           Visible="@_formVisible"
           ConfirmLoading="@_confirmLoading"
           OnOk="@HandleOk" 
           OnCancel="@HandleCancel">
        <Form Model="@model" Size="Form"
              LabelColSpan="8" 
              WrapperColSpan="16"
              OnFinish="OnFinish"
              OnFinishFailed="OnFinishFailed"
              @ref="@_form">
            <FormItem Label="插件名称">
                <Input @bind-Value="@context.PluginName" />
            </FormItem>
            <FormItem Label="平台">
                <RadioGroup @bind-Value="@context.Platform">
                    <Radio RadioButton Value="@X64">X64</Radio>
                     <Radio RadioButton Value="@X86">X86</Radio>
                 </RadioGroup>
             </FormItem>
            <FormItem Label="版本">
                <Input @bind-Value="@context.Version" />
            </FormItem>
            <FormItem Label="文件">
                <InputFile  OnChange="@OnInputFileChange" />
            </FormItem>
            <FormItem Label="哈希">
                <Input @bind-Value="@context.Hash" />
            </FormItem>
            <FormItem Label="入口点">
                <Input @bind-Value="@context.EntryPoint" />
            </FormItem>
            <FormItem Label="参数">
                <TextArea @bind-Value="@context.Arguments" />
            </FormItem>
            <FormItem Label="立即启动">
                <Input Type="checkbox" @bind-Value="@context.Launch" />
            </FormItem>
        </Form>
    </Modal>
    <Space>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="ShowModal">上传插件</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary">刷新</Button>
        </SpaceItem>

    </Space>
     <Table Size="TableSize.Small" Loading="_loading" EnableVirtualization="true" TItem="PluginInfo" DataSource="@_pluginsList" OnRowClick="OnRowClick">
        <PropertyColumn Title="插件名称" Sortable="true" Filterable="true" Property="c=>c.pluginName"></PropertyColumn>
        <PropertyColumn Title="插件版本" Sortable="true" Property="c=>c.version"></PropertyColumn>
        <PropertyColumn Title="入口点" Sortable="true" Property="c=>c.entryPoint"></PropertyColumn>
        <PropertyColumn Title="启动参数" Sortable="true" Property="c=>c.arguments"></PropertyColumn>
        <PropertyColumn Title="哈希" Sortable="true"  Property="c=>c.hash"></PropertyColumn>
        <PropertyColumn Title="立即启动" Width="50" Property="c=>c.launch"></PropertyColumn>
        <PropertyColumn Title="平台" Property="c=>c.platform"></PropertyColumn>
        <ActionColumn Title="操作">
            <Space Size=@("middle")>
                <SpaceItem>
                    <a target="_blank" href="@("/api/virtualfilesystem/"+context.downloadUrl)">下载</a>
                </SpaceItem>
                <SpaceItem>
                     <Button Type="@ButtonType.Link" OnClick="()=>DeletePlugin(context)">删除</Button>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>


</GridContent>


 @code{
    string X64 = "X64";
    string X86 = "X86";

    bool _formVisible = false;
    bool _formSubmitting = false;
    bool _confirmLoading = false;
    bool _loading;
    Form<PluginModel> _form;
    PluginModel model = new PluginModel();



    private IEnumerable<PluginInfo>? _pluginsList = Array.Empty<PluginInfo>();

    public class PluginModel
    {
        [Required]
        public string PluginName { get; set; }
        [Required]
        public string Platform { get; set; } = "X64";
        [Required]
        public string Version { get; set; }
        [Required]
        public IBrowserFile File { get; set; }

        public string Arguments { get; set; }

        [Required]
        public string Hash { get; set; }

        public string EntryPoint { get; set; }

        public string Launch { get; set; }

    }

    private void ShowModal()
    {
        _formVisible = true;
    }

    private void OnNodeNameChanged(MouseEventArgs e)
    {

    }


    private void OnSelectedFactoryNameChanged(string value)
    {
        Console.WriteLine($"selected size: ${value}");
    }

    private bool OnFilterFactoryName(string value, string name)
    {
        return string.IsNullOrEmpty(value) ? string.IsNullOrEmpty(name) : name.StartsWith(value);
    }

    private HttpRequestMessage BuildRequestMessage()
    {
        string requestUri = $"http://localhost:5000/api/plugins/upload/";
        var requestMessage = new HttpRequestMessage(HttpMethod.Post, requestUri);
        var requestContent = new MultipartFormDataContent();
        var streamContent = new StreamContent(this.model.File.OpenReadStream(1024 * 1024 * 100));
        requestContent.Add(streamContent, "file", this.model.File.Name);
        requestMessage.Headers.Add("JobsWorkerWebService-Platform", this.model.Platform);
        requestMessage.Headers.Add("JobsWorkerWebService-Version", this.model.Version);
        requestMessage.Headers.Add("JobsWorkerWebService-PluginName", this.model.PluginName);
        requestMessage.Headers.Add("JobsWorkerWebService-Arguments", this.model.Arguments);
        requestMessage.Headers.Add("JobsWorkerWebService-EntryPoint", this.model.EntryPoint);
        requestMessage.Headers.Add("JobsWorkerWebService-Hash", this.model.Hash);
        requestMessage.Headers.Add("JobsWorkerWebService-Launch", this.model.Launch == null ? bool.FalseString : this.model.Launch);
        requestMessage.Content = requestContent;
        return requestMessage;
    }

    /// <summary>
    /// on modal OK button is click, submit form manually
    /// </summary>
    /// <param name="e"></param>
    private async Task HandleOk(MouseEventArgs e)
    {
        _formSubmitting = true;
        try
        {
            this._confirmLoading = true;
            if (string.IsNullOrEmpty(this.model.PluginName) || string.IsNullOrWhiteSpace(this.model.PluginName))
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "上传插件",
                        Description = "请输入插件名称",
                    });
                return;
            }
            if (string.IsNullOrEmpty(this.model.Platform) || string.IsNullOrWhiteSpace(this.model.Platform))
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "上传插件",
                        Description = "请选择平台",
                    });
                return;
            }
            if (string.IsNullOrEmpty(this.model.Version) || string.IsNullOrWhiteSpace(this.model.Version))
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "上传插件",
                        Description = "请输入版本",
                    });
                return;
            }
            if (this.model.File == null)
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "上传插件",
                        Description = "请选择文件",
                    });
                return;
            }
            if (string.IsNullOrEmpty(this.model.Hash) || string.IsNullOrWhiteSpace(this.model.Hash))
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "上传插件",
                        Description = "请输入哈希",
                    });
                return;
            }

            this.StateHasChanged();
            using var requestMessage = BuildRequestMessage();
            var httpRsp = await this.HttpClient.SendAsync(requestMessage).ConfigureAwait(true);
            httpRsp.EnsureSuccessStatusCode();
            var apiResult = await httpRsp.Content.ReadFromJsonAsync<ApiResult>();
            if (apiResult.ErrorCode == 0)
            {
                this._form.Submit();
                _formVisible = false;
                await this.RefreshPluginListAsync();
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "上传插件",
                        Description = "上传插件成功",
                    });
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "上传插件",
                        Description = $"上传插件失败,错误代码:{apiResult.ErrorCode},错误消息:{apiResult.Message}",
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "异常",
                    Description = ex.ToString(),
                });
        }
        finally
        {
            _confirmLoading = false;
        }

    }

    private void HandleCancel(MouseEventArgs e)
    {
        this._formVisible = false;
    }

    /// <summary>
    /// when form is submited, close the modal
    /// </summary>
    /// <param name="args"></param>
    private void OnFinish(EditContext editContext)
    {
        _formSubmitting = false;
        _formVisible = false;
        this.model = new PluginModel();
    }

    private void OnFinishFailed(EditContext editContext)
    {
        this.model = new PluginModel();
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(model)}");
    }

    private void OnRowClick(RowData<PluginInfo> row)
    {

    }

    private async void OnRefreshClick()
    {
        await this.RefreshPluginListAsync();
    }

    async Task RefreshPluginListAsync()
    {
        try
        {
            this._loading = true;
            this._pluginsList = await this.HttpClient.GetFromJsonAsync<List<PluginInfo>>($"/api/plugins/list?rdm={Random.Shared.Next()}");
            this._loading = false;
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "加载失败",
                    Description = ex.Message,
                });
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync(){

        await this.RefreshPluginListAsync();
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        this.model.File = e.File;
    }

    private async Task DeletePlugin(PluginInfo pluginInfo){
        try
        {
            var httpRsp = await this.HttpClient.PostAsync($"/api/plugins/delete?pluginId={pluginInfo.pluginId}", null);
            httpRsp.EnsureSuccessStatusCode();
            var apiResult = await httpRsp.Content.ReadFromJsonAsync<ApiResult>();
            if (apiResult.ErrorCode == 0)
            {
                await this.RefreshPluginListAsync();
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "操作",
                        Description = "删除插件成功",
                    });
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "操作",
                        Description = $"删除插件失败,错误代码:{apiResult.ErrorCode},错误消息:{apiResult.Message}",
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "操作",
                    Description = $"删除插件失败,错误代码:{ex.HResult},错误消息:{ex.ToString()}",
                });
        }
        finally
        {

        }

    }
}
