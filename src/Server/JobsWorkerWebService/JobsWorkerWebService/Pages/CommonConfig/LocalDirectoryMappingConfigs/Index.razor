@namespace JobsWorkerWebService.Pages.CommonConfig.LocalDirectoryMappingConfigs
@page "/CommonConfig/LocalDirectoryMappingConfigs"
@using JobsWorker.Shared.DataModels

@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService

<GridContent>
    <Modal Title="@_modalTitle"
           Width="800"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" 
              LabelColSpan="4"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
              @if (context == null)
                {
                    <Empty />
                }
                else
                {
                    <FormItem Label="名称">
                         <Input @bind-Value="@context.Name" />
                    </FormItem>
                    <FormItem Label="默认配置">
                        <Switch @bind-Checked="@context.IsDefault" />
                    </FormItem>
                    <FormItem Label="路径映射">
                    <Button OnClick="AddNewEntry" Type="primary" Style="margin-bottom:16px;margin-right:16px">
                        添加
                    </Button>
                    <Button OnClick="RemoveEntries" Type="primary" Style="margin-bottom:16px;margin-right:16px">
                        删除
                    </Button>
                    <StringEntryTable NameTitle="备注"
                                      ValueTitle="路径"
                        DataSource="@context.Entries" 
                        @bind-SelectedItems="@_selectedEntries"
                        RemoveItemAction="@DeleteSelectedEntry"
                        />
          
                    </FormItem>
                }
        </Form>
    </Modal>

    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>this.QueryConfigListAsync()">刷新</Button>
        </SpaceItem>

    </Space>
    <Table @ref="_table" Size="TableSize.Small" Loading="_loading" EnableVirtualization="true" TItem="LocalDirectoryMappingConfigModel" DataSource="@_dataSource">
       <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c=>c.Id"></PropertyColumn>
        <PropertyColumn Title="名称" Sortable Property="c=>c.Name"></PropertyColumn>
        <PropertyColumn Title="默认映射" Sortable="true" Property="c=>c.IsDefault"></PropertyColumn>
             <ActionColumn Fixed="right" Width="250" Title="操作">
                 <CellRender Context="cellData">
                     <Space>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="()=>ShowEditForm(context.Copy<LocalDirectoryMappingConfigModel>())"></Button>
                         </SpaceItem>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="()=>ShowEditForm(context)"></Button>
                         </SpaceItem>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="()=>DeleteConfig(context)"></Button>
                         </SpaceItem>
                         @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="()=>cellData.RowData.Expanded=false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="()=>cellData.RowData.Expanded=true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>

        <ExpandTemplate>
            <Tabs Animated>
                <TabPane Tab="本地目录映射" Key="1">
                    <StringEntryTable DataSource="@context.Data.Entries"
                                      NameTitle="备注"
                                      ValueTitle="目录"
                                      IsEditable="false" />
                </TabPane>
            </Tabs>
        </ExpandTemplate>
    </Table>
</GridContent>

 @code {
    ITable _table;
    string _modalTitle;
    bool _editFormVisible = false;
    bool _editFormSubmitting = false;
    bool _editFormConfirmLoading = false;
    Form<LocalDirectoryMappingConfigModel> _editForm;
    IEnumerable<LocalDirectoryMappingConfigModel>? _dataSource = Array.Empty<LocalDirectoryMappingConfigModel>();
    IEnumerable<StringEntry> _selectedEntries;

    LocalDirectoryMappingConfigModel _editModel = new LocalDirectoryMappingConfigModel();

    private bool _loading;

    private void ShowEditForm(LocalDirectoryMappingConfigModel? localDirectoryMappingConfig = null)
    {
        this._editFormVisible = true;
        if (localDirectoryMappingConfig == null)
        {
            this._editModel = new LocalDirectoryMappingConfigModel()
                {
                    Id = Guid.NewGuid().ToString()
                };
            this._modalTitle = "新建配置";
        }
        else
        {
            this._editModel = localDirectoryMappingConfig;
            this._modalTitle = "编辑配置";
        }
    }

    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            foreach (var item in this._editModel.Entries)
            {
                item.EndEdit();
            }
            var apiResult = await this.ApiService.AddOrUpdateAsync([this._editModel]);
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
                this._editFormVisible = false;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = "加载配置失败",
                });
        }
        finally
        {
            this._editFormSubmitting = false;
            this._editFormConfirmLoading = false;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        this._editFormSubmitting = false;
        this._editFormConfirmLoading = false;
    }

    private void DeleteSelectedEntry(StringEntry entry)
    {
        this._editModel.Entries.Remove(entry);
    }

    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions()
            {
                Button1Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "确定",
                    Type = ButtonType.Primary,
                },
                Button2Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "取消"
                }
            };
        return _confirmService.Show(
                content,
                title,
                ConfirmButtons.OKCancel,
                ConfirmIcon.Info,
                options);
    }

    private async Task DeleteConfig(LocalDirectoryMappingConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }
            var apiResult = await this.ApiService.RemoveAsync([model]);
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = "加载配置失败",
                });
        }
    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        this._editFormVisible = false;
    }


    private void HandleEditFormOk(MouseEventArgs e)
    {
        this._editFormSubmitting = true;
        this._editForm.Submit();


    }


    protected override async Task OnInitializedAsync()
    {
        this._loading = true;
        await this.QueryConfigListAsync().ConfigureAwait(false);
        this._loading = false;
    }

    private async Task QueryConfigListAsync()
    {
        try
        {
            var apiResult = await this.ApiService.QueryLocalDirectoryMappingConfigListAsync();
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "加载失败",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }

    }

    private void AddNewEntry()
    {
        var entry = this._editModel.AddEntry();
        entry.BeginEdit();
    }

    private void RemoveEntries()
    {
        foreach (var item in this._selectedEntries)
        {
            this._editModel.Entries.Remove(item);
        }
    }


}
