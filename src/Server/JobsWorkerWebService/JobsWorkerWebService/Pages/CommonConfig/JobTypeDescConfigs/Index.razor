@namespace JobsWorkerWebService.Pages.CommonConfig.JobTypeDescConfigs
@page "/CommonConfig/JobTypeDescConfigs"
@inject NotificationService _notice
@inject ApiService ApiService
@inject IMessageService _message
@inject ConfirmService _confirmService

<GridContent>
    <Modal Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk" 
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4" 
              Layout="@FormLayout.Horizontal"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="名称">
                <Input @bind-Value="@context.Name"  />
             </FormItem>
             <FormItem Label="描述">
                <Input @bind-Value="@context.Description" />
             </FormItem>
             <FormItem Label="类型">
                <Input @bind-Value="@context.FullName" />
             </FormItem>
             <FormItem Label="选项编辑器">
                <Select DataSource="@_optionEditors" 
                        DefaultValue="@(this._optionEditors.FirstOrDefault())"
                        @bind-Value="@_selectedEditor"
                        LabelName="@nameof(TypedEditor<OptionValueType>.Name)"
                        Style="width:200px" />
                <Button OnClick="AddOptionEditor" Disabled="@(this._selectedEditor==null)" Type="primary" Style="margin-bottom:16px;margin-left:16px;">
                    添加
                </Button>
                <Button OnClick="RemoveSelectedOptionEditors" Disabled="@(this._selectedOptionEditors.IsNullOrEmpty())" Type="primary" Style="margin-bottom:16px;margin-left:16px;">
                    删除
                </Button>
                <StringEntryTable DataSource="@context.OptionEditors"
                                  NameTitle="字段"
                                  ValueTitle="编辑器"
                                  IsValueEditable="false"
                                  @bind-SelectedItems="@_selectedOptionEditors"
                                  RemoveItemAction="@RemoveSelectedOptionEditor" />
             </FormItem>

        </Form>
    </Modal>

    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>this.QueryConfigListAsync()">刷新</Button>
        </SpaceItem>

    </Space>
<Table @ref="_table" RowExpandable="c=>true" Size="TableSize.Small" Loading="_loading" EnableVirtualization="true" TItem="JobTypeDescConfigModel" DataSource="@_dataSource">
    <ColumnDefinitions>
            <Selection Key="@context.Id" Type="checkbox" />
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c=>c.Id"></PropertyColumn>
             <PropertyColumn Title="名称" Sortable Property="c=>c.Name"></PropertyColumn>
             <PropertyColumn Title="类型" Sortable="true" Property="c=>c.FullName"></PropertyColumn>
             <PropertyColumn Title="描述" Sortable="true" Property="c=>c.Description"></PropertyColumn>
             <ActionColumn Fixed="right" Width="250" Title="操作">
                 <CellRender Context="cellData">
                     <Space>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="()=>ShowEditForm(context.Copy<JobTypeDescConfigModel>())"></Button>
                         </SpaceItem>
                        <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="()=>ShowEditForm(context)"></Button>
                         </SpaceItem>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="()=>DeleteConfig(context)"></Button>
                         </SpaceItem>

                         @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="()=>cellData.RowData.Expanded=false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="()=>cellData.RowData.Expanded=true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
    </ColumnDefinitions>
    <ExpandTemplate>
         <Tabs Animated>
                <TabPane Tab="选项编辑器" Key="1">
                    <StringEntryTable DataSource="@context.Data.OptionEditors"
                                      NameTitle="备注"
                                      ValueTitle="编辑器"
                                      IsEditable="false" />
                </TabPane>
            </Tabs>
    </ExpandTemplate>
</Table>
</GridContent>

 @code {
    ITable _table;
    string _modalTitle;
    bool _editFormVisible = false;
    bool _editFormSubmitting = false;
    bool _editFormConfirmLoading = false;
    Form<JobTypeDescConfigModel> _editForm;
    JobTypeDescConfigModel _editModel = new JobTypeDescConfigModel();

    IEnumerable<StringEntry> _selectedOptionEditors;

    List<TypedEditor<OptionValueType>> _optionEditors = new List<TypedEditor<OptionValueType>>();

    TypedEditor<OptionValueType> _selectedEditor;


    private bool _loading;
    private IEnumerable<JobTypeDescConfigModel>? _dataSource = Array.Empty<JobTypeDescConfigModel>();

    private void ShowEditForm(JobTypeDescConfigModel? model = null)
    {
        this._editFormVisible = true;
        if (model == null)
        {
            this._editModel = new JobTypeDescConfigModel()
                {
                    Id = Guid.NewGuid().ToString()
                };
            this._modalTitle = "新建配置";

        }
        else
        {
            this._editModel = model.Clone<JobTypeDescConfigModel>();
            this._modalTitle = "编辑配置";
        }
    }


    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            var apiResult = await this.ApiService.AddOrUpdateAsync([this._editModel]);
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
                this._editFormVisible = false;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.Message,
                });
        }
        finally
        {
            this._editFormSubmitting = false;
            this._editFormConfirmLoading = false;
        }

    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        this._editFormSubmitting = false;
        this._editFormConfirmLoading = false;
    }

    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions()
            {
                Button1Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "确定",
                    Type = ButtonType.Primary,
                },
                Button2Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "取消"
                }
            };
        return _confirmService.Show(
                content,
                title,
                ConfirmButtons.OKCancel,
                ConfirmIcon.Info,
                options);
    }

    private async Task DeleteConfig(JobTypeDescConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }
            var apiResult = await this.ApiService.RemoveAsync([model]);
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = "加载配置失败",
                });
        }
    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        this._editFormSubmitting = false;
        this._editFormVisible = false;
    }


    private void HandleEditFormOk(MouseEventArgs e)
    {
        this._editFormSubmitting = true;
        this._editForm.Submit();

    }

    protected override async Task OnInitializedAsync()
    {
        this._optionEditors.AddRange(new TypedEditor<OptionValueType>[]
            {
            new TypedEditor<OptionValueType>()
                {
                    Name = "布尔编辑器",
                    Value = OptionValueType.BooleanValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "文本编辑器",
                    Value = OptionValueType.TextValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "脚本编辑器",
                    Value = OptionValueType.ScriptCodeValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "数字编辑器",
                    Value = OptionValueType.NumberValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "文本数组编辑器",
                    Value = OptionValueType.TextArrayValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "Kafka编辑器",
                    Value = OptionValueType.KafkaConfigValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "Mysql编辑器",
                    Value = OptionValueType.MysqlConfigValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "Ftp编辑器",
                    Value = OptionValueType.FtpConfigValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "Kafka列表编辑器",
                    Value = OptionValueType.KafkaConfigListValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "Mysql列表编辑器",
                    Value = OptionValueType.MysqlConfigListValue,

                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "Ftp列表编辑器",
                    Value = OptionValueType.FtpConfigListValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "Ftp上传编辑器",
                    Value = OptionValueType.FtpUploadConfigValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "日志上传编辑器",
                    Value = OptionValueType.LogUploadConfigValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "插件编辑器",
                    Value = OptionValueType.PluginConfigValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "目录映射编辑器",
                    Value = OptionValueType.LocalDirectoryMappingConfigValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "Ftp上传列表编辑器",
                    Value = OptionValueType.FtpUploadConfigListValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "日志上传列表编辑器",
                    Value = OptionValueType.LogUploadConfigListValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "插件列表编辑器",
                    Value = OptionValueType.PluginConfigListValue,
                },
            new TypedEditor<OptionValueType>()
                {
                    Name = "目录映射列表编辑器",
                    Value = OptionValueType.LocalDirectoryMappingConfigListValue,
                }
            }
            );
        await this.QueryConfigListAsync();
    }

    private async Task QueryConfigListAsync()
    {
        try
        {
            var apiResult = await this.ApiService.QueryJobTypeDescConfigListAsync();
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }

    }

    private void RemoveSelectedOptionEditor(StringEntry stringEntry)
    {
        this._editModel.OptionEditors.Remove(stringEntry);
    }

    private void AddOptionEditor()
    {
        if (this._selectedEditor == null)
        {
            return;
        }
        var entry = new StringEntry()
            {
                Id = Guid.NewGuid().ToString(),
                Name = null,
                Value = this._selectedEditor.Name,
                Tag = this._selectedEditor.Value.ToString(),
            };
        this._editModel.OptionEditors.Add(entry);
        entry.BeginEdit();
    }

    private void RemoveSelectedOptionEditors()
    {
        if (this._selectedOptionEditors == null)
        {
            return;
        }
        foreach (var item in this._selectedOptionEditors)
        {
            this._editModel.OptionEditors.Remove(item);
        }
    }


}
