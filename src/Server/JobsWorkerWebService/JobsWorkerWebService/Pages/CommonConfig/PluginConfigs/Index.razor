@namespace JobsWorkerWebService.Client.Pages.CommonConfig.Plugins
@page "/CommonConfig/PluginConfigs"
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService

<GridContent>
    <Drawer Closable="true" Width="320" Visible="@_pluginConfigDrawerVisible" Title='("查看插件内容")' OnClose="ClosePluginConfigJsonStringDrawer">
        <Template style="height:90%">
            <TextArea Style="height:500px" ReadOnly Value="@pluginString" />
        </Template>
    </Drawer>
     <Modal
           Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditOk" 
           OnCancel="@HandleCancel">
        <Form Model="@_editModel" 
              LabelColSpan="4" 
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
            <FormItem Label="名称">
                <Input @bind-Value="@context.Name" />
            </FormItem>
            <FormItem Label="平台">
                <RadioGroup @bind-Value="@context.Platform">
                    @foreach (var platform in platforms)
                    {
                        <Radio RadioButton Value="@platform">@platform</Radio>
                    }
                 </RadioGroup>
             </FormItem>
            <FormItem Label="版本">
                <Input @bind-Value="@context.Version" />
            </FormItem>
            <FormItem Label="文件">
                <InputFile  OnChange="@OnInputFileChanged" />
            </FormItem>
            <FormItem Label="哈希">
                <Input @bind-Value="@context.Hash" />
            </FormItem>
            <FormItem Label="入口点">
                <Input @bind-Value="@context.EntryPoint" />
            </FormItem>
            <FormItem Label="参数">
                <TextArea @bind-Value="@context.Arguments" />
            </FormItem>
            <FormItem Label="启动">
                <Switch @bind-Checked="@context.Launch" />
            </FormItem>
        </Form>
    </Modal>

    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>ShowEditForm()">新增配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="OnRefreshClick">刷新</Button>
        </SpaceItem>

    </Space>
    <Table Size="TableSize.Small" Loading="_loading" EnableVirtualization="true" TItem="PluginConfigModel" DataSource="@_dataSource" OnRowClick="OnRowClick">
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c=>c.Id"></PropertyColumn>
         <PropertyColumn Title="名称" Sortable Property="c=>c.Name"></PropertyColumn>
        <PropertyColumn Title="平台" Property="c=>c.Platform"></PropertyColumn>
        <PropertyColumn Title="版本" Sortable="true" Property="c=>c.Version"></PropertyColumn>
             <ActionColumn Fixed="right" Width="250" Title="操作">
                 <CellRender Context="cellData">
                     <Space>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="()=>ShowEditForm(context.Copy<PluginConfigModel>())"></Button>
                         </SpaceItem>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="()=>ShowEditForm(context)"></Button>
                         </SpaceItem>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="()=>DeleteConfig(context)"></Button>
                         </SpaceItem>
                         @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="()=>cellData.RowData.Expanded=false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="()=>cellData.RowData.Expanded=true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
    <ExpandTemplate>
         <Tabs Animated>
                <TabPane Tab="插件属性" Key="1">
                    <Space Size=@("small")>
                        <SpaceItem>
                            <a target="_blank" href="@("/api/commonconfig/plugin/download/"+context.Data.Id)">下载插件</a>
                        </SpaceItem>
                        <SpaceItem>
                            <Button Type="@ButtonType.Link" OnClick="()=>OpenPluginConfigJsonStringDrawer(context.Data)">查看</Button>
                        </SpaceItem>
                    </Space>

                    @if (true)
                    {
                        var data = new List<StringEntry>([
                            new StringEntry("入口点", context.Data.EntryPoint),
                            new StringEntry("参数", context.Data.Arguments),
                            new StringEntry("哈希", context.Data.Hash),
                            new StringEntry("启动", context.Data.Launch.ToString()),
                        ]);
                        <StringEntryTable DataSource="@data"
                                          NameTitle="备注"
                                          ValueTitle="值"
                                          IsEditable="false" />
                    }
                </TabPane>
            </Tabs>
    </ExpandTemplate>
    </Table>


</GridContent>


@code{
    string[] platforms = new string[]
            {
            "X64",
            "X86",
            "Unknown"
            };
    string _modalTitle;
    string? pluginString;
    bool _pluginConfigDrawerVisible = false;
    bool _editFormVisible = false;
    bool _editFormSubmitting = false;
    bool _editFormConfirmLoading = false;
    bool _loading;
    Form<PluginConfigEditModel> _editForm;
    PluginConfigEditModel _editModel = new PluginConfigEditModel();



    private IEnumerable<PluginConfigModel>? _dataSource = Array.Empty<PluginConfigModel>();

    public class PluginConfigEditModel : PluginConfigModel
    {
        [Required]
        [JsonIgnore]
        public IBrowserFile File { get; set; }
    }

    private void ShowEditForm(PluginConfigModel? model = null)
    {
        this._editFormVisible = true;
        if (model == null)
        {
            this._editModel = new PluginConfigEditModel()
                {
                    Id = Guid.NewGuid().ToString()
                };
            this._modalTitle = "新建配置";
        }
        else
        {
            this._editModel = new PluginConfigEditModel()
                {
                    Id = model.Id,
                    Arguments = model.Arguments,
                    Name = model.Name,
                    Hash = model.Hash,
                    EntryPoint = model.EntryPoint,
                    Launch = model.Launch,
                    Platform = model.Platform,
                    Version = model.Version,

                };
            this._modalTitle = "编辑配置";
        }
    }

    private void OpenPluginConfigJsonStringDrawer(PluginConfigModel pluginInfo)
    {
        this.pluginString = JsonSerializer.Serialize(pluginInfo);
        this._pluginConfigDrawerVisible = true;
    }

    private void ClosePluginConfigJsonStringDrawer()
    {
        this.pluginString = null;
        this._pluginConfigDrawerVisible = false;
    }


    private void HandleEditOk(MouseEventArgs e)
    {
        this._editFormSubmitting = true;
        this._editForm.Submit();

    }

    private void HandleCancel(MouseEventArgs e)
    {
        this._editFormVisible = false;
    }

    private async Task OnEditFormFinish(EditContext editContext)
    {

        try
        {
            this._editFormConfirmLoading = true;

            var apiResult = await this.ApiService.AddOrUpdateAsync(this._editModel, this._editModel.File.OpenReadStream(1024 * 1024 * 200));
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
                this._editFormVisible = false;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "上传插件失败",
                        Description = $"上传插件失败,错误代码:{apiResult.ErrorCode},错误消息:{apiResult.Message}",
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "上传插件失败",
                    Description = ex.ToString(),
                });
        }
        finally
        {
            this._editFormSubmitting = false;
            this._editFormConfirmLoading = false;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        this._editFormSubmitting = false;
        this._editFormConfirmLoading = false;
    }

    private void OnRowClick(RowData<PluginConfigModel> row)
    {

    }

    private async void OnRefreshClick()
    {
        await this.QueryPluginConfigListAsync();
    }

    async Task QueryPluginConfigListAsync()
    {
        try
        {
            this._loading = true;
            var apiResult = await this.ApiService.QueryPluginConfigListAsync();
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "加载失败",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "加载失败",
                    Description = ex.ToString(),
                });
        }
        finally
        {
            this._loading = false;
        }
    }

    protected override async Task OnInitializedAsync(){

        this._loading = true;
        await this.QueryPluginConfigListAsync().ConfigureAwait(false);
        this._loading = false;
    }

    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        this._editModel.File = e.File;
    }

    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions()
            {
                Button1Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "确定",
                    Type = ButtonType.Primary,
                },
                Button2Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "取消"
                }
            };
        return _confirmService.Show(
                content,
                title,
                ConfirmButtons.OKCancel,
                ConfirmIcon.Info,
                options);
    }

    private async Task DeleteConfig(PluginConfigModel pluginConfig){
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }
            var apiResult = await this.ApiService.RemoveAsync([pluginConfig]);
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "操作",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "加载失败",
                    Description = ex.ToString(),
                });
        }
        finally
        {

        }

    }
}
