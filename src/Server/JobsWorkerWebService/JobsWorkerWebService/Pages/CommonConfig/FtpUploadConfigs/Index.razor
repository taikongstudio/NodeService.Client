@namespace JobsWorkerWebService.Pages.CommonConfig.FtpUploadConfigs
@page "/CommonConfig/FtpUploadConfigs"
@using JobsWorker.Shared.DataModels
@inject NotificationService _notice
@inject ApiService ApiService
@inject ConfirmService _confirmService

<GridContent>
    <Modal Width="800"
           Title="@_modalTitle"
           Visible="@_editFormVisible"
           ConfirmLoading="@_editFormConfirmLoading"
           OnOk="@HandleEditFormOk"
           OnCancel="@HandleEditFormCancel">
        <Form Model="@_editModel" Size="@AntSizeLDSType.Default"
              LabelColSpan="4"
              WrapperColSpan="20"
              OnFinish="OnEditFormFinish"
              OnFinishFailed="OnEditFormFinishFailed"
              @ref="@_editForm">
                 @if (context == null)
                {
                    <Empty />
                }
                else
                {
                    <FormItem Label="配置名称">
                        <Input @bind-Value="@context.Name"  />
                     </FormItem>
                    <FormItem Label="Ftp配置">
                        <Select DataSource="@_ftpConfigs"
                                @bind-Value="@_editModel.FtpConfigForeignKey"
                                LabelName="@nameof(FtpConfigModel.Name)"
                                ValueName="@nameof(FtpConfigModel.Id)"
                                Style="width:200px" />
                    </FormItem>
                    <FormItem Label="远程目录">
                        <Input @bind-Value="@context.RemoteDirectory" />
                    </FormItem>
                    <FormItem Label="使用目录映射">
                        <Switch @bind-Checked="@context.IsLocalDirectoryUseMapping"></Switch>
                    </FormItem>
                    @if (context.IsLocalDirectoryUseMapping)
                    {
                        context.LocalDirectory = "null";
                        <FormItem Label="目录映射">
                            <Select DataSource="@_localDirectoryMappingConfigs"
                                    @bind-Value="@_editModel.LocalDirectoryMappingConfigForeignKey"
                                    LabelName="@nameof(LocalDirectoryMappingConfigModel.Name)"
                                    ValueName="@nameof(LocalDirectoryMappingConfigModel.Id)"
                                    Style="width:200px" />
                        </FormItem>
                    }
                    else
                    {
                        <FormItem Label="本地目录">
                            <Input @bind-Value="@context.LocalDirectory" />
                        </FormItem>
                    }
                    <FormItem Label="模式匹配">
                        <Input @bind-Value="@context.SearchPattern" />
                     </FormItem>
                    <FormItem Label="包含子目录">
                        <Switch @bind-Checked="@context.IncludeSubDirectories"  />
                     </FormItem>
                    <FormItem Label="重试次数">
                        <AntDesign.InputNumber @bind-Value="@context.RetryTimes" />
                    </FormItem>
                    <FormItem Label="过滤器">
                        <Button OnClick="AddNewFilter" Type="primary" Style="margin-bottom:16px;margin-right:16px">
                            添加
                        </Button>
                    <Button OnClick="RemoveSelectedFilters" Type="primary" Style="margin-bottom:16px;margin-right:16px">
                            删除
                        </Button>
                    <StringEntryTable DataSource="@context.Filters" 
                                      NameTitle="备注"
                                      ValueTitle="过滤器"
                                      @bind-SelectedItems="@_selectedFilters"
                                      RemoveItemAction="@RemoveSelectedFilter" />
                    </FormItem>

                }
        </Form>
     </Modal>

    <Space Style="margin-bottom:16px">
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>ShowEditForm()">新建配置</Button>
        </SpaceItem>
        <SpaceItem>
            <Button Type="@ButtonType.Primary" OnClick="()=>this.QueryConfigListAsync()">刷新</Button>
        </SpaceItem>

    </Space>
    <Table @ref="_table" Size="TableSize.Small" Loading="_loading" EnableVirtualization="true" TItem="FtpUploadConfigModel" DataSource="@_dataSource">
        <ColumnDefinitions>
            <PropertyColumn Title="标志" Ellipsis Sortable Property="c=>c.Id"></PropertyColumn>
        <PropertyColumn Title="名称" Ellipsis Sortable Property="c=>c.Name"></PropertyColumn>
        <PropertyColumn Title="Ftp配置" Sortable="true" Property="c=>c.FtpConfig">
            <Text>@context.FtpConfig?.Name</Text>
        </PropertyColumn>
        <PropertyColumn Title="远程目录" Ellipsis Sortable="true" Property="c=>c.RemoteDirectory"></PropertyColumn>
        <PropertyColumn Title="本地目录" Ellipsis Sortable="true" Property="c=>c.LocalDirectory"></PropertyColumn>
        <PropertyColumn Title="包含子目录" Sortable="true" Property="c=>c.IncludeSubDirectories"></PropertyColumn>
        <PropertyColumn Title="模式匹配" Sortable="true" Property="c=>c.SearchPattern"></PropertyColumn>
        <PropertyColumn Title="重试次数" Sortable="true" Property="c=>c.RetryTimes"></PropertyColumn>
             <ActionColumn Fixed="right" Width="250" Title="操作">
                 <CellRender Context="cellData">
                     <Space>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Copy" OnClick="()=>ShowEditForm(context.Copy<FtpUploadConfigModel>())"></Button>
                         </SpaceItem>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Edit" OnClick="()=>ShowEditForm(context)"></Button>
                         </SpaceItem>
                         <SpaceItem>
                             <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Danger Icon="@IconType.Outline.Delete" OnClick="()=>DeleteConfig(context)"></Button>
                         </SpaceItem>
                         @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="()=>cellData.RowData.Expanded=false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="()=>cellData.RowData.Expanded=true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
         <ExpandTemplate>
             <Tabs Animated>
                <TabPane Tab="本地目录映射" Key="1">
                    @if (context.Data.IsLocalDirectoryUseMapping)
                    {
                        <StringEntryTable DataSource="@context.Data.LocalDirectoryMappingConfig.Entries"
                        NameTitle="备注"
                        ValueTitle="路径"
                        IsEditable="false" />
                    }
                </TabPane>
                <TabPane Tab="过滤器" Key="2">
                    <StringEntryTable DataSource="@context.Data.Filters"
                                      NameTitle="备注"
                                      ValueTitle="过滤器"
                                      IsEditable="false" />
                </TabPane>


            </Tabs>
        </ExpandTemplate>
    </Table>
</GridContent>

@code {
    ITable _table;
    string _modalTitle;
    bool _editFormVisible = false;
    bool _editFormSubmitting = false;
    bool _editFormConfirmLoading = false;
    Form<FtpUploadConfigModel> _editForm;
    FtpUploadConfigModel _editModel = new FtpUploadConfigModel();

    IEnumerable<FtpConfigModel> _ftpConfigs;

    IEnumerable<LocalDirectoryMappingConfigModel> _localDirectoryMappingConfigs;

    IEnumerable<StringEntry> _selectedFilters;

    private bool _loading;

    private IEnumerable<FtpUploadConfigModel>? _dataSource = Array.Empty<FtpUploadConfigModel>();

    private async Task ShowEditForm(FtpUploadConfigModel? model = null)
    {
        this._loading = true;
        await this.QueryFtpConfigListAsync().ConfigureAwait(false);
        await this.QueryLocalDirectoryMappingConfigListAsync().ConfigureAwait(false);
        this._editFormVisible = true;
        if (model == null)
        {
            this._editModel = new FtpUploadConfigModel()
                {
                    Id = Guid.NewGuid().ToString()
                };
            this._modalTitle = "新建配置";
        }
        else
        {
            this._editModel = model.Clone<FtpUploadConfigModel>();
            this._modalTitle = "编辑配置";
            FindConfigs(model);
        }
        this._loading = false;
    }

    private async Task QueryFtpConfigListAsync()
    {
        var apiResult = await this.ApiService.QueryFtpConfigListAsync();
        if (apiResult.ErrorCode == 0)
        {
            this._ftpConfigs = apiResult.Result ?? Array.Empty<FtpConfigModel>();
        }
        else
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Description = "错误提示",
                    Message = apiResult.Message
                });
        }
    }

    private async Task QueryLocalDirectoryMappingConfigListAsync()
    {
        var apiResult = await this.ApiService.QueryLocalDirectoryMappingConfigListAsync().ConfigureAwait(false);;
        if (apiResult.ErrorCode == 0)
        {
            this._localDirectoryMappingConfigs = apiResult.Result ?? Array.Empty<LocalDirectoryMappingConfigModel>();
        }
        else
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Description = "错误提示",
                    Message = apiResult.Message
                });
        }
    }

    private void FindConfigs(FtpUploadConfigModel model)
    {
        model.FtpConfig = this._ftpConfigs.FirstOrDefault(x => x.Id == model.FtpConfigForeignKey);
        if (model.IsLocalDirectoryUseMapping)
        {
            model.LocalDirectoryMappingConfig =
            this._localDirectoryMappingConfigs
            .FirstOrDefault(x => x.Id == model.LocalDirectoryMappingConfigForeignKey);
        }
    }

    private async Task OnEditFormFinish(EditContext editContext)
    {
        try
        {
            var apiResult = await this.ApiService.AddOrUpdateAsync([this._editModel]);
            if (apiResult.ErrorCode == 0)
            {
                await this.QueryFtpConfigListAsync();
                await this.QueryLocalDirectoryMappingConfigListAsync();
                foreach (var item in apiResult.Result)
                {
                    FindConfigs(item);
                }
                this._dataSource = apiResult.Result;
                this._editFormVisible = false;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }
        finally
        {
            this._editFormSubmitting = false;
            this._editFormConfirmLoading = false;
        }
    }

    private void OnEditFormFinishFailed(EditContext editContext)
    {
        this._editFormSubmitting = false;
        this._editFormConfirmLoading = false;
    }

    private Task<ConfirmResult> ShowConfirmDialogAsync(string title, string content)
    {
        var options = new ConfirmButtonOptions()
            {
                Button1Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "确定",
                    Type = ButtonType.Primary,
                },
                Button2Props = new AntDesign.ButtonProps()
                {
                    ChildContent = "取消"
                }
            };
        return _confirmService.Show(
                content,
                title,
                ConfirmButtons.OKCancel,
                ConfirmIcon.Info,
                options);
    }

    private async Task DeleteConfig(FtpUploadConfigModel model)
    {
        try
        {
            if (await ShowConfirmDialogAsync("删除确认", "确定要删除吗？") != ConfirmResult.OK)
            {
                return;
            }
            var apiResult = await this.ApiService.RemoveAsync([model]);
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = "加载配置失败",
                });
        }
    }


    private void HandleEditFormCancel(MouseEventArgs e)
    {
        this._editFormVisible = false;
    }


    private async Task HandleEditFormOk(MouseEventArgs e)
    {
        this._editFormSubmitting = true;
        this._editForm.Submit();


    }

    protected override async Task OnInitializedAsync()
    {
        this._loading = true;
        await this.QueryConfigListAsync().ConfigureAwait(false);
        this._loading = false;
    }

    private async Task QueryConfigListAsync()
    {
        try
        {

            var apiResult = await this.ApiService.QueryFtpUploadConfigListAsync();
            if (apiResult.ErrorCode == 0)
            {
                await this.QueryFtpConfigListAsync();
                await this.QueryLocalDirectoryMappingConfigListAsync();
                foreach (var item in apiResult.Result)
                {
                    FindConfigs(item);
                }
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = "加载配置失败",
                });
        }

    }

    private void AddNewFilter()
    {
        var entry = new StringEntry()
            {
                Id = Guid.NewGuid().ToString()
            };
        this._editModel.Filters.Add(entry);
        entry.BeginEdit();
    }

    private void RemoveSelectedFilter(StringEntry filter)
    {
        this._editModel.Filters.Remove(filter);
    }

    private void RemoveSelectedFilters()
    {
        foreach (var filter in this._selectedFilters)
        {
            this._editModel.Filters.Remove(filter);
        }
    }



}
