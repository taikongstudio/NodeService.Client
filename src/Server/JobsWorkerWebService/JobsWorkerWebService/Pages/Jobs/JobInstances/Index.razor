@namespace JobsWorkerWebService.Pages.Jobs.JobInstances
@page "/Jobs/Instances"
@inject ApiService ApiService
@inject NotificationService _notice

<GridContent>

     <Table Size="TableSize.Small" 
     Loading="_loading" 
     ScrollX="1200px"
     EnableVirtualization="true" 
     TItem="JobExecutionInstanceModel"
     DataSource="@_dataSource">
        <TitleTemplate>
            <GridRow>
                <GridCol Span="4">
                    <Title Level="3">作业执行实例</Title>
                </GridCol>
                <GridCol Span="12" Offset="8">
                    <Search Placeholder="搜索作业实例名称" @bind-Value="@_jonNameSearchText" OnSearch="()=>_nodeTable?.ReloadData()" />
                </GridCol>
            </GridRow>
            <GridRow>
                <Space Style="margin-bottom:16px">
                    <SpaceItem>
                        <RangePicker ValueExpression="()=>DateTimes" Size="small" TValue="DateTime?[]" ShowTime="@true" OnChange="OnDatePickerChanged" />
                    </SpaceItem>
                    <SpaceItem>
                        <Button Type="@ButtonType.Primary" OnClick="()=>this.QueryConfigListAsync()">查询</Button>
                    </SpaceItem>

                </Space>
            </GridRow>
        </TitleTemplate>
         <ColumnDefinitions>
            <Selection Key="@context.Id" Width="40" Fixed="left" Type="checkbox" />
             <PropertyColumn Title="标志" Ellipsis  Sortable Property="c=>c.Id"></PropertyColumn>
             <PropertyColumn Title="名称" Ellipsis Sortable  Property="c=>c.Name"></PropertyColumn>
             <PropertyColumn Title="触发时间" Sortable="true"  Property="c=>c.FireTime"></PropertyColumn>
             <PropertyColumn Title="触发类型" Sortable="true"  Property="c=>c.FireType"></PropertyColumn>
             <PropertyColumn Title="开始时间" Sortable="true"  Property="c=>c.ExecutionBeginTime"></PropertyColumn>
             <PropertyColumn Title="结束时间" Sortable="true"  Property="c=>c.ExecutionEndTime"></PropertyColumn>
             <PropertyColumn Title="状态" Sortable="true"  Property="c=>c.Status"></PropertyColumn>
             <PropertyColumn Title="消息" Ellipsis Sortable="true"  Property="c=>c.Message"></PropertyColumn>
             <ActionColumn Fixed="right"  Width="150"  Title="操作">
                 <CellRender Context="cellData">
                     <Space>
                         <SpaceItem>
                             <Button Danger Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Close" ></Button>
                         </SpaceItem>
                         @if (cellData.RowData.Expanded)
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.FullscreenExit" OnClick="()=>cellData.RowData.Expanded=false"></Button>
                            </SpaceItem>
                        }
                        else
                        {
                            <SpaceItem>
                                <Button Shape="@ButtonShape.Circle" Type="@ButtonType.Primary" Icon="@IconType.Outline.Fullscreen" OnClick="()=>cellData.RowData.Expanded=true"></Button>
                            </SpaceItem>
                        }

                    </Space>
                </CellRender>
            </ActionColumn>
        </ColumnDefinitions>
        <ExpandTemplate>
            <Tabs Animated>
                <TabPane Tab="作业日志" Key="1">

                </TabPane>
    

            </Tabs>
        </ExpandTemplate>
    </Table>
</GridContent>

 @code {

    [Parameter]
    public string NodeId { get; set; }

    [Parameter]
    public string JobId { get; set; }


    ITable _nodeTable;
    string _jonNameSearchText;

    private DateTime StartDateTime;
    private DateTime EndDateTime;

    private DateTime?[] DateTimes = [DateTime.Now.Date, DateTime.Now.Date];


    private bool _loading;
    private IEnumerable<JobExecutionInstanceModel>? _dataSource = Array.Empty<JobExecutionInstanceModel>();


    protected override async Task OnInitializedAsync()
    {
        this.StartDateTime = DateTime.Today.Date;
        this.EndDateTime = DateTime.Today.AddDays(1).Date.AddSeconds(-1);
        this.DateTimes[0] = this.StartDateTime;
        this.DateTimes[1] = this.EndDateTime;
        this._loading = true;
        await this.QueryConfigListAsync().ConfigureAwait(false);
        this._loading = false;
    }

    private void OnDatePickerChanged(DateRangeChangedEventArgs<DateTime?[]> e)
    {
        this.StartDateTime = e.Dates[0] ?? DateTime.Today.Date;
        this.EndDateTime = e.Dates[1] ?? DateTime.Today.AddDays(1).Date.AddSeconds(-1);
    }

    private async Task QueryConfigListAsync()
    {
        try
        {
            this._loading = true;
            var apiResult = await this.ApiService.QueryAllJobExecutionInstancesAsync(this.StartDateTime, this.EndDateTime).ConfigureAwait(false);
            this._loading = false;
            if (apiResult.ErrorCode == 0)
            {
                this._dataSource = apiResult.Result;
            }
            else
            {
                await this._notice.Open(new NotificationConfig()
                    {
                        Message = "错误提示",
                        Description = apiResult.Message,
                    });
            }
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "错误提示",
                    Description = ex.ToString(),
                });
        }

    }



}
