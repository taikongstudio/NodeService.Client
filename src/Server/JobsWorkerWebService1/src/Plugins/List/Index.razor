@namespace JobsWorkerWebService.Client.Pages.Plugins.List
@page "/plugins"
@using JobsWorker.Shared.Models
@using JobsWorkerWebService.Client
@inject System.Net.Http.HttpClient httpClient
@using System.ComponentModel
@using AntDesign.TableModels
@inject NotificationService _notice

<GridContent>
    <Row>

    </Row>
    <Space>
    </Space>
    <Table Size="TableSize.Small" EnableVirtualization="true" TItem="PluginInfo" DataSource="@_pluginsList" OnRowClick="OnRowClick">
        <PropertyColumn Title="插件名称" Sortable="true" Filterable="true" Property="c=>c.pluginName"></PropertyColumn>
        <PropertyColumn Title="插件版本" Sortable="true" Property="c=>c.version"></PropertyColumn>
        <PropertyColumn Title="下载地址" Sortable="true" Property="c=>c.downloadUrl"></PropertyColumn>
        <PropertyColumn Title="入口点" Sortable="true" Property="c=>c.entryPoint"></PropertyColumn>
        <PropertyColumn Title="启动参数" Sortable="true" Property="c=>c.arguments"></PropertyColumn>
        <PropertyColumn Title="哈希" Sortable="true"  Property="c=>c.hash"></PropertyColumn>
        <PropertyColumn Title="更新后立即启动" Width="50" Property="c=>c.launch"></PropertyColumn>
        <PropertyColumn Title="平台" Property="c=>c.platform"></PropertyColumn>
        <ActionColumn Title="操作">
            <Space Size=@("middle")>
                <SpaceItem>
                    <a>删除</a>
                </SpaceItem>
            </Space>
        </ActionColumn>
    </Table>


</GridContent>


    @code{

    private bool _loading;

    private IEnumerable<PluginInfo>? _pluginsList = Array.Empty<PluginInfo>();

    private void OnNodeNameChanged(MouseEventArgs e)
    {

    }

    private void OnSelectedFactoryNameChanged(string value)
    {
        Console.WriteLine($"selected size: ${value}");
    }

    private bool OnFilterFactoryName(string value, string name)
    {
        return string.IsNullOrEmpty(value) ? string.IsNullOrEmpty(name) : name.StartsWith(value);
    }

    private void OnRowClick(RowData<PluginInfo> row)
    {

    }

    private async void OnRefreshClick()
    {
        await this.RefreshPluginListAsync();
    }

    async Task RefreshPluginListAsync()
    {
        try
        {
            this._loading = true;
            this._pluginsList = await this.httpClient.GetFromJsonAsync<List<PluginInfo>>($"/api/plugins/list?rdm={Random.Shared.Next()}");
            this._loading = false;
        }
        catch (Exception ex)
        {
            await this._notice.Open(new NotificationConfig()
                {
                    Message = "加载失败",
                    Description = ex.Message,
                });
        }
        finally
        {
            this.StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync(){

        await this.RefreshPluginListAsync();
    }
}
